{"version":3,"sources":["../../../src/api/controllers/invoice.controller.js"],"names":["findAll","req","res","next","console","log","Invoice","find","then","json","invoices","catch","status","HttpServerCodes","INTERNAL_SERVER_ERROR","error","create","body","schema","Joi","object","keys","item","string","required","date","due","tax","number","optional","rate","qty","validate","value","details","BAD_REQUEST","invoice","err","findOne","id","params","findById","NOT_FOUND","deleteRecord","findByIdAndDelete","update","findOneAndUpdate","_id","new"],"mappings":"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","file":"invoice.controller.js","sourcesContent":["import Invoice from \"../models/invoice.models\";\r\nimport HttpServerCodes from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nexport default {\r\n  findAll(req, res, next) {\r\n    console.log(\"inside findAll\");\r\n    Invoice.find()\r\n      .then(invoices => res.json(invoices))\r\n      .catch(err => {\r\n        return res.status(HttpServerCodes.INTERNAL_SERVER_ERROR).json(error);\r\n      });\r\n  },\r\n  create(req, res, next) {\r\n    console.log(\"inside create\", req.body);\r\n    // let error = new Error({ message: 'error from create' });\r\n    // error.status = 404;\r\n    // next(error);\r\n    // let { item, qty, date, due, tax, rate } = req.body;\r\n\r\n    const schema = Joi.object().keys({\r\n      item: Joi.string().required(),\r\n      date: Joi.date().required(),\r\n      due: Joi.date().required(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.date().required(),\r\n      qty: Joi.number().required()\r\n    });\r\n\r\n    const { error, value } = Joi.validate(req.body, schema);\r\n    // console.log('value of req', value);\r\n    if (error && error.details) {\r\n      return res.status(HttpServerCodes.BAD_REQUEST).json(error);\r\n    }\r\n\r\n    Invoice.create(value)\r\n      .then(invoice => {\r\n        res.json(invoice);\r\n      })\r\n      .catch(err => {\r\n        res\r\n          .status(HttpServerCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ err: \"error while inserting data\" });\r\n      });\r\n  },\r\n  findOne(req, res) {\r\n    const { id } = req.params;\r\n    Invoice.findById(id)\r\n      .then(invoice => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(HttpServerCodes.NOT_FOUND)\r\n            .json({ err: \"could not find any voice\" });\r\n        }\r\n        return res.json(invoice);\r\n      })\r\n      .catch(err => {\r\n        res\r\n          .status(HttpServerCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ err: \"error while inserting data\" });\r\n      });\r\n  },\r\n  deleteRecord(req, res) {\r\n    const { id } = req.params;\r\n    Invoice.findByIdAndDelete(id)\r\n      .then(invoice => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(HttpServerCodes.NOT_FOUND)\r\n            .json({ err: \"could not find the record\" });\r\n        }\r\n        return res.json(invoice);\r\n      })\r\n      .catch(err => {\r\n        res\r\n          .status(HttpServerCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ err: \"error while inserting data\" });\r\n      });\r\n  },\r\n  update(req, res) {\r\n    const schema = Joi.object().keys({\r\n      item: Joi.string().optional(),\r\n      date: Joi.date().optional(),\r\n      due: Joi.date().optional(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.date().optional(),\r\n      qty: Joi.number().optional()\r\n    });\r\n    const { id } = req.params;\r\n    const { error, value } = Joi.validate(req.body, schema);\r\n    if (error && error.details) {\r\n      return res.status(HttpServerCodes.BAD_REQUEST).json(error);\r\n    }\r\n    Invoice.findOneAndUpdate({ _id: id }, value, { new: true })\r\n      .then(invoice => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(HttpServerCodes.NOT_FOUND)\r\n            .json({ err: \"could not find the record\" });\r\n        }\r\n        return res.json(invoice);\r\n      })\r\n      .catch(err => {\r\n        res\r\n          .status(HttpServerCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ err: \"error while updating data\" });\r\n      });\r\n  }\r\n};\r\n"]}