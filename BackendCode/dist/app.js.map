{"version":3,"sources":["../src/app.js"],"names":["app","use","express","json","urlencoded","extended","swaggerUi","serve","setup","swaggerDocument","explorer","mongoose","Promise","global","connect","useNewUrlParser","get","req","res","mes","router","next","error","Error","message","status","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQC,kBAAQC,IAAR,EAAR;AACAH,IAAIC,GAAJ,CAAQC,kBAAQE,UAAR,CAAmB,EAAEC,UAAU,IAAZ,EAAnB,CAAR;AACAL,IAAIC,GAAJ,CACE,WADF,EAEEK,2BAAUC,KAFZ,EAGED,2BAAUE,KAAV,CAAgBC,iBAAhB,EAAiC;AAC/BC,YAAU;AADqB,CAAjC,CAHF;;AAQAC,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACAD,mBAASG,OAAT,CACE,qCADF,EAEE,EAAEC,iBAAiB,IAAnB,EAFF;;AAKAf,IAAIgB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIf,IAAJ,CAAS;AACPgB,SAAK;AADE,GAAT;AAGD,CAJD;;AAMAnB,IAAIC,GAAJ,CAAQ,MAAR,EAAgBmB,cAAhB;;AAEApB,IAAIC,GAAJ,CAAQ,UAACgB,GAAD,EAAMC,GAAN,EAAWG,IAAX,EAAoB;AAC1B,MAAMC,QAAQ,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,QAAME,OAAN,GAAgB,eAAhB;AACAF,QAAMG,MAAN,GAAe,GAAf;AACAJ,OAAKC,KAAL;AACD,CALD;AAMAtB,IAAIC,GAAJ,CAAQ,UAACqB,KAAD,EAAQL,GAAR,EAAaC,GAAb,EAAkBG,IAAlB,EAA2B;AACjCH,MAAIO,MAAJ,CAAWH,MAAMG,MAAN,IAAgB,GAA3B;AACA,SAAOP,IAAIf,IAAJ,CAAS;AACdmB,WAAO;AACLE,eAASF,MAAME;AADV;AADO,GAAT,CAAP;AAKD,CAPD;AAQAxB,IAAI0B,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBC,UAAQC,GAAR,CAAY,wBAAZ;AACD,CAFD","file":"app.js","sourcesContent":["import express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { router } from \"./config/routes\";\r\nimport logger from \"morgan\";\r\nimport swaggerUi from \"swagger-ui-express\";\r\nimport swaggerDocument from \"./config/swagger.json\";\r\n\r\nlet app = express();\r\napp.use(logger(\"dev\"));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(\r\n  \"/api-docs\",\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerDocument, {\r\n    explorer: true\r\n  })\r\n);\r\n\r\nmongoose.Promise = global.Promise;\r\nmongoose.connect(\r\n  \"mongodb://localhost/invoice-builder\",\r\n  { useNewUrlParser: true }\r\n);\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.json({\r\n    mes: \"welcome\"\r\n  });\r\n});\r\n\r\napp.use(\"/api\", router);\r\n\r\napp.use((req, res, next) => {\r\n  const error = new Error(\"Not found\");\r\n  error.message = \"Invalid route\";\r\n  error.status = 404;\r\n  next(error);\r\n});\r\napp.use((error, req, res, next) => {\r\n  res.status(error.status || 500);\r\n  return res.json({\r\n    error: {\r\n      message: error.message\r\n    }\r\n  });\r\n});\r\napp.listen(3000, () => {\r\n  console.log(\"listening to port 3000\");\r\n});\r\n"]}